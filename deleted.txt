FacultyManager(BaseUserManager) :
    def create_user(self, username, name, email, password=None, is_admin=False, is_staff=False, is_active=False) :
        if not username :
            raise ValueError('username must be specified')
        if not name :
            raise ValueError('name must be specified')
        if not email :
            raise ValueError("You must provide an email")


        user_obj = self.model(
            email=self.normalize_email(email),
            username=username,
        )

        user_obj.set_password(password)
        user_obj.is_staff = is_staff
        user_obj.is_admin = is_admin
        user_obj.is_active = is_active

        user_obj.save(using=self._db)

        return user_obj


    def create_staffuser(self, username, name, email, password=None) :
        user = self.create_user(
            username,
            name,
            email,
            password=password,
            is_staff=True,

        )

        return user

    def create_superuser(self, username, name, email, password=None) :
        user = self.create_user(
            username,
            name,
            email,
            password=password,
            is_staff=True,
            is_admin=True,
        )

        return user

        return user

class Faculty(AbstractBaseUser) :
    email = models.EmailField(max_length=255, unique=True)
    username = models.CharField(max_length=255, unique=True)
    name = models.CharField(max_length=255, null=False)

    is_admin = models.BooleanField(default = False)
    is_active = models.BooleanField(default = True)
    is_staff = models.BooleanField(default = False)
    is_superuser = models.BooleanField(default = False)
    date_joined = models.DateTimeField(verbose_name = "date_joined", auto_now_add = True)
    last_login = models.DateTimeField(verbose_name = "last_login", auto_now = True)

    USERNAME_FIELD = 'username'

    # USERNAME_FIELD and password are required by default
    REQUIRED_FIELDS = ['name', 'email']

    objects = FacultyManager()
    

    def __str__(self) :
        return 'Prof. ' + self.name

    def get_full_name(self) :
        return

    def get_short_name(self) :
        return
    
    def has_perm(self, perm, obj = None) :
        return self.is_admin

    def has_module_perms(self, app_label) :
        return True

    @property
    def is_staff(self) :
        return self.is_staff

    @property
    def is_admin(self) :
        return self.is_admin

    @property
    def is_active(self) :
        return self.is_active
